<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>perf-report</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">perf</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">perf Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>perf-report</refname>
  <refpurpose>Read perf.data (created by perf record) and display the profile</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<blockquote>
<literallayout><emphasis>perf report</emphasis> [-i &lt;file&gt; | --input=file]</literallayout>
</blockquote>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>This command displays the performance counter profile information recorded
via perf record.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-i
</term>
<term>
--input=
</term>
<listitem>
<simpara>
        Input file name. (default: perf.data unless stdin is a fifo)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Be more verbose. (show symbol address, etc)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-n
</term>
<term>
--show-nr-samples
</term>
<listitem>
<simpara>
        Show the number of samples for each symbol
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-cpu-utilization
</term>
<listitem>
<simpara>
        Show sample percentage for different cpu modes.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-T
</term>
<term>
--threads
</term>
<listitem>
<simpara>
        Show per-thread event counters.  The input data file should be recorded
        with -s option.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-c
</term>
<term>
--comms=
</term>
<listitem>
<simpara>
        Only consider symbols in these comms. CSV that understands
        <ulink url="file://filename">file://filename</ulink> entries.  This option will affect the percentage of
        the overhead column.  See --percentage for more info.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--pid=
</term>
<listitem>
<simpara>
        Only show events for given process ID (comma separated list).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--tid=
</term>
<listitem>
<simpara>
        Only show events for given thread ID (comma separated list).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-d
</term>
<term>
--dsos=
</term>
<listitem>
<simpara>
        Only consider symbols in these dsos. CSV that understands
        <ulink url="file://filename">file://filename</ulink> entries.  This option will affect the percentage of
        the overhead column.  See --percentage for more info.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-S
</term>
<term>
--symbols=
</term>
<listitem>
<simpara>
        Only consider these symbols. CSV that understands
        <ulink url="file://filename">file://filename</ulink> entries.  This option will affect the percentage of
        the overhead column.  See --percentage for more info.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--symbol-filter=
</term>
<listitem>
<simpara>
        Only show symbols that match (partially) with this filter.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-U
</term>
<term>
--hide-unresolved
</term>
<listitem>
<simpara>
        Only display entries resolved to a symbol.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-s
</term>
<term>
--sort=
</term>
<listitem>
<simpara>
        Sort histogram entries by given key(s) - multiple keys can be specified
        in CSV format.  Following sort keys are available:
        pid, comm, dso, symbol, parent, cpu, socket, srcline, weight, local_weight.
</simpara>
<literallayout class="monospaced">Each key has following meaning:</literallayout>
<itemizedlist>
<listitem>
<simpara>
comm: command (name) of the task which can be read via /proc/&lt;pid&gt;/comm
</simpara>
</listitem>
<listitem>
<simpara>
pid: command and tid of the task
</simpara>
</listitem>
<listitem>
<simpara>
dso: name of library or module executed at the time of sample
</simpara>
</listitem>
<listitem>
<simpara>
symbol: name of function executed at the time of sample
</simpara>
</listitem>
<listitem>
<simpara>
parent: name of function matched to the parent regex filter. Unmatched
        entries are displayed as "[other]".
</simpara>
</listitem>
<listitem>
<simpara>
cpu: cpu number the task ran at the time of sample
</simpara>
</listitem>
<listitem>
<simpara>
socket: processor socket number the task ran at the time of sample
</simpara>
</listitem>
<listitem>
<simpara>
srcline: filename and line number executed at the time of sample.  The
        DWARF debugging info must be provided.
</simpara>
</listitem>
<listitem>
<simpara>
srcfile: file name of the source file of the same. Requires dwarf
        information.
</simpara>
</listitem>
<listitem>
<simpara>
weight: Event specific weight, e.g. memory latency or transaction
        abort cost. This is the global weight.
</simpara>
</listitem>
<listitem>
<simpara>
local_weight: Local weight version of the weight above.
</simpara>
</listitem>
<listitem>
<simpara>
transaction: Transaction abort flags.
</simpara>
</listitem>
<listitem>
<simpara>
overhead: Overhead percentage of sample
</simpara>
</listitem>
<listitem>
<simpara>
overhead_sys: Overhead percentage of sample running in system mode
</simpara>
</listitem>
<listitem>
<simpara>
overhead_us: Overhead percentage of sample running in user mode
</simpara>
</listitem>
<listitem>
<simpara>
overhead_guest_sys: Overhead percentage of sample running in system mode
        on guest machine
</simpara>
</listitem>
<listitem>
<simpara>
overhead_guest_us: Overhead percentage of sample running in user mode on
        guest machine
</simpara>
</listitem>
<listitem>
<simpara>
sample: Number of sample
</simpara>
</listitem>
<listitem>
<simpara>
period: Raw number of event count of sample
</simpara>
<literallayout class="monospaced">By default, comm, dso and symbol keys are used.
(i.e. --sort comm,dso,symbol)</literallayout>
<literallayout class="monospaced">If --branch-stack option is used, following sort keys are also
available:
dso_from, dso_to, symbol_from, symbol_to, mispredict.</literallayout>
</listitem>
<listitem>
<simpara>
dso_from: name of library or module branched from
</simpara>
</listitem>
<listitem>
<simpara>
dso_to: name of library or module branched to
</simpara>
</listitem>
<listitem>
<simpara>
symbol_from: name of function branched from
</simpara>
</listitem>
<listitem>
<simpara>
symbol_to: name of function branched to
</simpara>
</listitem>
<listitem>
<simpara>
mispredict: "N" for predicted branch, "Y" for mispredicted branch
</simpara>
</listitem>
<listitem>
<simpara>
in_tx: branch in TSX transaction
</simpara>
</listitem>
<listitem>
<simpara>
abort: TSX transaction abort.
</simpara>
</listitem>
<listitem>
<simpara>
cycles: Cycles in basic block
</simpara>
<literallayout class="monospaced">And default sort keys are changed to comm, dso_from, symbol_from, dso_to
and symbol_to, see '--branch-stack'.</literallayout>
<literallayout class="monospaced">If the --mem-mode option is used, the following sort keys are also available
(incompatible with --branch-stack):
symbol_daddr, dso_daddr, locked, tlb, mem, snoop, dcacheline.</literallayout>
</listitem>
<listitem>
<simpara>
symbol_daddr: name of data symbol being executed on at the time of sample
</simpara>
</listitem>
<listitem>
<simpara>
dso_daddr: name of library or module containing the data being executed
        on at the time of the sample
</simpara>
</listitem>
<listitem>
<simpara>
locked: whether the bus was locked at the time of the sample
</simpara>
</listitem>
<listitem>
<simpara>
tlb: type of tlb access for the data at the time of the sample
</simpara>
</listitem>
<listitem>
<simpara>
mem: type of memory access for the data at the time of the sample
</simpara>
</listitem>
<listitem>
<simpara>
snoop: type of snoop (if any) for the data at the time of the sample
</simpara>
</listitem>
<listitem>
<simpara>
dcacheline: the cacheline the data address is on at the time of the sample
</simpara>
<literallayout class="monospaced">And the default sort keys are changed to local_weight, mem, sym, dso,
symbol_daddr, dso_daddr, snoop, tlb, locked, see '--mem-mode'.</literallayout>
<literallayout class="monospaced">If the data file has tracepoint event(s), following (dynamic) sort keys
are also available:
trace, trace_fields, [&lt;event&gt;.]&lt;field&gt;[/raw]</literallayout>
</listitem>
<listitem>
<simpara>
trace: pretty printed trace output in a single column
</simpara>
</listitem>
<listitem>
<simpara>
trace_fields: fields in tracepoints in separate columns
</simpara>
</listitem>
<listitem>
<simpara>
&lt;field name&gt;: optional event and field name for a specific field
</simpara>
<literallayout class="monospaced">The last form consists of event and field names.  If event name is
omitted, it searches all events for matching field name.  The matched
field will be shown only for the event has the field.  The event name
supports substring match so user doesn't need to specify full subsystem
and event name everytime.  For example, 'sched:sched_switch' event can
be shortened to 'switch' as long as it's not ambiguous.  Also event can
be specified by its index (starting from 1) preceded by the '%'.
So '%1' is the first event, '%2' is the second, and so on.</literallayout>
<literallayout class="monospaced">The field name can have '/raw' suffix which disables pretty printing
and shows raw field value like hex numbers.  The --raw-trace option
has the same effect for all dynamic sort keys.</literallayout>
<literallayout class="monospaced">The default sort keys are changed to 'trace' if all events in the data
file are tracepoint.</literallayout>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>
<varlistentry>
<term>
-F
</term>
<term>
--fields=
</term>
<listitem>
<simpara>
        Specify output field - multiple keys can be specified in CSV format.
        Following fields are available:
        overhead, overhead_sys, overhead_us, overhead_children, sample and period.
        Also it can contain any sort key(s).
</simpara>
<literallayout class="monospaced">By default, every sort keys not specified in -F will be appended
automatically.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
-p
</term>
<term>
--parent=&lt;regex&gt;
</term>
<listitem>
<simpara>
        A regex filter to identify parent. The parent is a caller of this
        function and searched through the callchain, thus it requires callchain
        information recorded. The pattern is in the exteneded regex format and
        defaults to "^sys_|^do_page_fault", see <emphasis>--sort parent</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-x
</term>
<term>
--exclude-other
</term>
<listitem>
<simpara>
        Only display entries with parent-match.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-w
</term>
<term>
--column-widths=&lt;width[,width&#8230;]&gt;
</term>
<listitem>
<simpara>
        Force each column width to the provided list, for large terminal
        readability.  0 means no limit (default behavior).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-t
</term>
<term>
--field-separator=
</term>
<listitem>
<simpara>
        Use a special separator character and don&#8217;t pad with spaces, replacing
        all occurrences of this separator in symbol names (and other output)
        with a <emphasis>.</emphasis> character, that thus it&#8217;s the only non valid separator.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-D
</term>
<term>
--dump-raw-trace
</term>
<listitem>
<simpara>
        Dump raw trace in ASCII.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-g
</term>
<term>
--call-graph=&lt;print_type,threshold[,print_limit],order,sort_key[,branch],value&gt;
</term>
<listitem>
<simpara>
        Display call chains using type, min percent threshold, print limit,
        call order, sort key, optional branch and value.  Note that ordering of
        parameters is not fixed so any parement can be given in an arbitraty order.
        One exception is the print_limit which should be preceded by threshold.
</simpara>
<literallayout class="monospaced">print_type can be either:
- flat: single column, linear exposure of call chains.
- graph: use a graph tree, displaying absolute overhead rates. (default)
- fractal: like graph, but displays relative rates. Each branch of
         the tree is considered as a new profiled object.
- folded: call chains are displayed in a line, separated by semicolons
- none: disable call chain display.</literallayout>
<literallayout class="monospaced">threshold is a percentage value which specifies a minimum percent to be
included in the output call graph.  Default is 0.5 (%).</literallayout>
<literallayout class="monospaced">print_limit is only applied when stdio interface is used.  It's to limit
number of call graph entries in a single hist entry.  Note that it needs
to be given after threshold (but not necessarily consecutive).
Default is 0 (unlimited).</literallayout>
<literallayout class="monospaced">order can be either:
- callee: callee based call graph.
- caller: inverted caller based call graph.
Default is 'caller' when --children is used, otherwise 'callee'.</literallayout>
<literallayout class="monospaced">sort_key can be:
- function: compare on functions (default)
- address: compare on individual code addresses</literallayout>
<literallayout class="monospaced">branch can be:
- branch: include last branch information in callgraph when available.
          Usually more convenient to use --branch-history for this.</literallayout>
<literallayout class="monospaced">value can be:
- percent: diplay overhead percent (default)
- period: display event period
- count: display event count</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
--children
</term>
<listitem>
<simpara>
        Accumulate callchain of children to parent entry so that then can
        show up in the output.  The output will have a new "Children" column
        and will be sorted on the data.  It requires callchains are recorded.
        See the &#8216;overhead calculation&#8217; section for more details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--max-stack
</term>
<listitem>
<simpara>
        Set the stack depth limit when parsing the callchain, anything
        beyond the specified depth will be ignored. This is a trade-off
        between information loss and faster processing especially for
        workloads that can have a very long callchain stack.
        Note that when using the --itrace option the synthesized callchain size
        will override this value if the synthesized callchain size is bigger.
</simpara>
<literallayout class="monospaced">Default: 127</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
-G
</term>
<term>
--inverted
</term>
<listitem>
<simpara>
        alias for inverted caller based call graph.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--ignore-callees=&lt;regex&gt;
</term>
<listitem>
<simpara>
        Ignore callees of the function(s) matching the given regex.
        This has the effect of collecting the callers of each such
        function into one place in the call-graph tree.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--pretty=&lt;key&gt;
</term>
<listitem>
<simpara>
        Pretty printing style.  key: normal, raw
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--stdio
</term>
<listitem>
<simpara>
Use the stdio interface.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--tui
</term>
<listitem>
<simpara>
Use the TUI interface, that is integrated with annotate and allows
        zooming into DSOs or threads, among other features. Use of --tui
        requires a tty, if one is not present, as when piping to other
        commands, the stdio interface is used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--gtk
</term>
<listitem>
<simpara>
Use the GTK2 interface.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-k
</term>
<term>
--vmlinux=&lt;file&gt;
</term>
<listitem>
<simpara>
        vmlinux pathname
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--kallsyms=&lt;file&gt;
</term>
<listitem>
<simpara>
        kallsyms pathname
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-m
</term>
<term>
--modules
</term>
<listitem>
<simpara>
        Load module symbols. WARNING: This should only be used with -k and
        a LIVE kernel.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-f
</term>
<term>
--force
</term>
<listitem>
<simpara>
        Don&#8217;t complain, do it.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--symfs=&lt;directory&gt;
</term>
<listitem>
<simpara>
        Look for files with symbols relative to this directory.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-C
</term>
<term>
--cpu
</term>
<listitem>
<simpara>
Only report samples for the list of CPUs provided. Multiple CPUs can
        be provided as a comma-separated list with no space: 0,1. Ranges of
        CPUs are specified with -: 0-2. Default is to report samples on all
        CPUs.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-M
</term>
<term>
--disassembler-style=
</term>
<listitem>
<simpara>
Set disassembler style for objdump.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--source
</term>
<listitem>
<simpara>
        Interleave source code with assembly code. Enabled by default,
        disable with --no-source.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--asm-raw
</term>
<listitem>
<simpara>
        Show raw instruction encoding of assembly instructions.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-total-period
</term>
<listitem>
<simpara>
Show a column with the sum of periods.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-I
</term>
<term>
--show-info
</term>
<listitem>
<simpara>
        Display extended information about the perf.data file. This adds
        information which may be very large and thus may clutter the display.
        It currently includes: cpu and numa topology of the host system.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-b
</term>
<term>
--branch-stack
</term>
<listitem>
<simpara>
        Use the addresses of sampled taken branches instead of the instruction
        address to build the histograms. To generate meaningful output, the
        perf.data file must have been obtained using perf record -b or
        perf record --branch-filter xxx where xxx is a branch filter option.
        perf report is able to auto-detect whether a perf.data file contains
        branch stacks and it will automatically switch to the branch view mode,
        unless --no-branch-stack is used.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--branch-history
</term>
<listitem>
<simpara>
        Add the addresses of sampled taken branches to the callstack.
        This allows to examine the path the program took to each sample.
        The data collection must have used -b (or -j) and -g.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--objdump=&lt;path&gt;
</term>
<listitem>
<simpara>
        Path to objdump binary.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--group
</term>
<listitem>
<simpara>
        Show event group information together.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--demangle
</term>
<listitem>
<simpara>
        Demangle symbol names to human readable form. It&#8217;s enabled by default,
        disable with --no-demangle.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--demangle-kernel
</term>
<listitem>
<simpara>
        Demangle kernel symbol names to human readable form (for C++ kernels).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--mem-mode
</term>
<listitem>
<simpara>
        Use the data addresses of samples in addition to instruction addresses
        to build the histograms.  To generate meaningful output, the perf.data
        file must have been obtained using perf record -d -W and using a
        special event -e cpu/mem-loads/ or -e cpu/mem-stores/. See
        <emphasis>perf mem</emphasis> for simpler access.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--percent-limit
</term>
<listitem>
<simpara>
        Do not show entries which have an overhead under that percent.
        (Default: 0).  Note that this option also sets the percent limit (threshold)
        of callchains.  However the default value of callchain threshold is
        different than the default value of hist entries.  Please see the
        --call-graph option for details.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--percentage
</term>
<listitem>
<simpara>
        Determine how to display the overhead percentage of filtered entries.
        Filters can be applied by --comms, --dsos and/or --symbols options and
        Zoom operations on the TUI (thread, dso, etc).
</simpara>
<literallayout class="monospaced">"relative" means it's relative to filtered entries only so that the
sum of shown entries will be always 100%.  "absolute" means it retains
the original value before and after the filter is applied.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
--header
</term>
<listitem>
<simpara>
        Show header information in the perf.data file.  This includes
        various information like hostname, OS and perf version, cpu/mem
        info, perf command line, event list and so on.  Currently only
        --stdio output supports this feature.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--header-only
</term>
<listitem>
<simpara>
        Show only perf.data header (forces --stdio).
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--itrace
</term>
<listitem>
<simpara>
        Options for decoding instruction tracing data. The options are:
</simpara>
<literallayout class="monospaced">i       synthesize instructions events
b       synthesize branches events
c       synthesize branches events (calls only)
r       synthesize branches events (returns only)
x       synthesize transactions events
e       synthesize error events
d       create a debug log
g       synthesize a call chain (use with i or x)
l       synthesize last branch entries (use with i or x)</literallayout>
<literallayout class="monospaced">The default is all events i.e. the same as --itrace=ibxe</literallayout>
<literallayout class="monospaced">In addition, the period (default 100000) for instructions events
can be specified in units of:</literallayout>
<literallayout class="monospaced">i       instructions
t       ticks
ms      milliseconds
us      microseconds
ns      nanoseconds (default)</literallayout>
<literallayout class="monospaced">Also the call chain size (default 16, max. 1024) for instructions or
transactions events can be specified.</literallayout>
<literallayout class="monospaced">Also the number of last branch entries (default 64, max. 1024) for
instructions or transactions events can be specified.</literallayout>
<literallayout class="monospaced">To disable decoding entirely, use --no-itrace.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
--full-source-path
</term>
<listitem>
<simpara>
        Show the full path for source files for srcline output.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--show-ref-call-graph
</term>
<listitem>
<simpara>
        When multiple events are sampled, it may not be needed to collect
        callgraphs for all of them. The sample sites are usually nearby,
        and it&#8217;s enough to collect the callgraphs on a reference event.
        So user can use "call-graph=no" event modifier to disable callgraph
        for other events to reduce the overhead.
        However, perf report cannot show callgraphs for the event which
        disable the callgraph.
        This option extends the perf report to show reference callgraphs,
        which collected by reference event, in no callgraph event.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--socket-filter
</term>
<listitem>
<simpara>
        Only report the samples on the processor socket that match with this filter
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--raw-trace
</term>
<listitem>
<simpara>
        When displaying traceevent output, do not use print fmt or plugins.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--hierarchy
</term>
<listitem>
<simpara>
        Enable hierarchical output.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_overhead_calculation">
<title>Overhead calculation</title>
<simpara>The overhead can be shown in two columns as <emphasis>Children</emphasis> and <emphasis>Self</emphasis> when
perf collects callchains.  The <emphasis>self</emphasis> overhead is simply calculated by
adding all period values of the entry - usually a function (symbol).
This is the value that perf shows traditionally and sum of all the
<emphasis>self</emphasis> overhead values should be 100%.</simpara>
<simpara>The <emphasis>children</emphasis> overhead is calculated by adding all period values of
the child functions so that it can show the total overhead of the
higher level functions even if they don&#8217;t directly execute much.
<emphasis>Children</emphasis> here means functions that are called from another (parent)
function.</simpara>
<simpara>It might be confusing that the sum of all the <emphasis>children</emphasis> overhead
values exceeds 100% since each of them is already an accumulation of
<emphasis>self</emphasis> overhead of its child functions.  But with this enabled, users
can find which function has the most overhead even if samples are
spread over the children.</simpara>
<simpara>Consider the following example; there are three functions like below.</simpara>
<literallayout>
&#10;.ft C&#10;void foo(void) {
    /* do something */
}

void bar(void) {
    /* do something */
    foo();
}

int main(void) {
    bar()
    return 0;
}&#10;.ft&#10;
</literallayout>
<simpara>In this case <emphasis>foo</emphasis> is a child of <emphasis>bar</emphasis>, and <emphasis>bar</emphasis> is an immediate
child of <emphasis>main</emphasis> so <emphasis>foo</emphasis> also is a child of <emphasis>main</emphasis>.  In other words,
<emphasis>main</emphasis> is a parent of <emphasis>foo</emphasis> and <emphasis>bar</emphasis>, and <emphasis>bar</emphasis> is a parent of <emphasis>foo</emphasis>.</simpara>
<simpara>Suppose all samples are recorded in <emphasis>foo</emphasis> and <emphasis>bar</emphasis> only.  When it&#8217;s
recorded with callchains the output will show something like below
in the usual (self-overhead-only) output of perf report:</simpara>
<literallayout>
&#10;.ft C&#10;Overhead  Symbol
........  .....................
  60.00%  foo
          |
          --- foo
              bar
              main
              __libc_start_main

  40.00%  bar
          |
          --- bar
              main
              __libc_start_main&#10;.ft&#10;
</literallayout>
<simpara>When the --children option is enabled, the <emphasis>self</emphasis> overhead values of
child functions (i.e. <emphasis>foo</emphasis> and <emphasis>bar</emphasis>) are added to the parents to
calculate the <emphasis>children</emphasis> overhead.  In this case the report could be
displayed as:</simpara>
<literallayout>
&#10;.ft C&#10;Children      Self  Symbol
........  ........  ....................
 100.00%     0.00%  __libc_start_main
          |
          --- __libc_start_main

 100.00%     0.00%  main
          |
          --- main
              __libc_start_main

 100.00%    40.00%  bar
          |
          --- bar
              main
              __libc_start_main

  60.00%    60.00%  foo
          |
          --- foo
              bar
              main
              __libc_start_main&#10;.ft&#10;
</literallayout>
<simpara>In the above output, the <emphasis>self</emphasis> overhead of <emphasis>foo</emphasis> (60%) was add to the
<emphasis>children</emphasis> overhead of <emphasis>bar</emphasis>, <emphasis>main</emphasis> and <emphasis>__libc_start_main</emphasis>.
Likewise, the <emphasis>self</emphasis> overhead of <emphasis>bar</emphasis> (40%) was added to the
<emphasis>children</emphasis> overhead of <emphasis>main</emphasis> and <emphasis>\_\_libc_start_main</emphasis>.</simpara>
<simpara>So <emphasis>\_\_libc_start_main</emphasis> and <emphasis>main</emphasis> are shown first since they have
same (100%) <emphasis>children</emphasis> overhead (even though they have zero <emphasis>self</emphasis>
overhead) and they are the parents of <emphasis>foo</emphasis> and <emphasis>bar</emphasis>.</simpara>
<simpara>Since v3.16 the <emphasis>children</emphasis> overhead is shown by default and the output
is sorted by its values. The <emphasis>children</emphasis> overhead is disabled by
specifying --no-children option on the command line or by adding
<emphasis>report.children = false</emphasis> or <emphasis>top.children = false</emphasis> in the perf config
file.</simpara>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>perf-stat</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>perf-annotate</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
</refentry>
