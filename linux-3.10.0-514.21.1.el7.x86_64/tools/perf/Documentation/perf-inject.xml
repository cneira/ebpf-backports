<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry>
<refmeta>
<refentrytitle>perf-inject</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">perf</refmiscinfo>
<refmiscinfo class="version"></refmiscinfo>
<refmiscinfo class="manual">perf Manual</refmiscinfo>
</refmeta>
<refnamediv>
  <refname>perf-inject</refname>
  <refpurpose>Filter to augment the events stream with additional information</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<blockquote>
<literallayout><emphasis>perf inject &lt;options&gt;</emphasis></literallayout>
</blockquote>
</refsynopsisdiv>
<refsect1 id="_description">
<title>DESCRIPTION</title>
<simpara>perf-inject reads a perf-record event stream and repipes it to stdout.  At any
point the processing code can inject other events into the event stream - in
this case build-ids (-b option) are read and injected as needed into the event
stream.</simpara>
<simpara>Build-ids are just the first user of perf-inject - potentially anything that
needs userspace processing to augment the events stream with additional
information could make use of this facility.</simpara>
</refsect1>
<refsect1 id="_options">
<title>OPTIONS</title>
<variablelist>
<varlistentry>
<term>
-b
</term>
<term>
--build-ids=
</term>
<listitem>
<simpara>
        Inject build-ids into the output stream
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-v
</term>
<term>
--verbose
</term>
<listitem>
<simpara>
        Be more verbose.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-i
</term>
<term>
--input=
</term>
<listitem>
<simpara>
        Input file name. (default: stdin)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-o
</term>
<term>
--output=
</term>
<listitem>
<simpara>
        Output file name. (default: stdout)
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-s
</term>
<term>
--sched-stat
</term>
<listitem>
<simpara>
        Merge sched_stat and sched_switch for getting events where and how long
        tasks slept. sched_switch contains a callchain where a task slept and
        sched_stat contains a timeslice how long a task slept.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--kallsyms=&lt;file&gt;
</term>
<listitem>
<simpara>
        kallsyms pathname
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
--itrace
</term>
<listitem>
<simpara>
        Decode Instruction Tracing data, replacing it with synthesized events.
        Options are:
</simpara>
<literallayout class="monospaced">i       synthesize instructions events
b       synthesize branches events
c       synthesize branches events (calls only)
r       synthesize branches events (returns only)
x       synthesize transactions events
e       synthesize error events
d       create a debug log
g       synthesize a call chain (use with i or x)
l       synthesize last branch entries (use with i or x)</literallayout>
<literallayout class="monospaced">The default is all events i.e. the same as --itrace=ibxe</literallayout>
<literallayout class="monospaced">In addition, the period (default 100000) for instructions events
can be specified in units of:</literallayout>
<literallayout class="monospaced">i       instructions
t       ticks
ms      milliseconds
us      microseconds
ns      nanoseconds (default)</literallayout>
<literallayout class="monospaced">Also the call chain size (default 16, max. 1024) for instructions or
transactions events can be specified.</literallayout>
<literallayout class="monospaced">Also the number of last branch entries (default 64, max. 1024) for
instructions or transactions events can be specified.</literallayout>
</listitem>
</varlistentry>
<varlistentry>
<term>
--strip
</term>
<listitem>
<simpara>
        Use with --itrace to strip out non-synthesized events.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
-j
</term>
<term>
--jit
</term>
<listitem>
<simpara>
        Process jitdump files by injecting the mmap records corresponding to jitted
        functions. This option also generates the ELF images for each jitted function
        found in the jitdumps files captured in the input perf.data file. Use this option
        if you are monitoring environment using JIT runtimes, such as Java, DART or V8.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</refsect1>
<refsect1 id="_see_also">
<title>SEE ALSO</title>
<simpara><citerefentry>
<refentrytitle>perf-record</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>perf-report</refentrytitle><manvolnum>1</manvolnum>
</citerefentry>, <citerefentry>
<refentrytitle>perf-archive</refentrytitle><manvolnum>1</manvolnum>
</citerefentry></simpara>
</refsect1>
</refentry>
